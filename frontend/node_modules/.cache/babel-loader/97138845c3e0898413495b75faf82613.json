{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCqDilj0kKMh6ILiNyaIjfSJUYyb1bblUU\",\n  authDomain: \"tribe-db.firebaseapp.com\",\n  databaseURL: \"https://tribe-db.firebaseio.com\",\n  projectId: \"tribe-db\",\n  storageBucket: \"tribe-db.appspot.com\",\n  messagingSenderId: \"228421973697\",\n  appId: \"1:228421973697:web:cc15bd6abbdc6b57808640\",\n  measurementId: \"G-049PCT3FH5\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //userAuth est un tableau d'informations fournies par Google après authentification avec un compte Google\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //Snapshot affiche des parametres supplementaires pour savoir si l'utilisateur existe dans la BD par exemple\n\n  const snapShot = await userRef.get(); //S'il n'existe pas on va le créer, on recupère les valeurs displayName et email de userAuth\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; //Auth pour l'authentification et Firestore pour le stockage des données\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider); //Exportation des data de shop.data vers Firebase\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      //Permet de convertir le title en url classique en retirant certains caracteres indesirables\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport default firebase;","map":{"version":3,"sources":["C:/Users/DELL/My Office/Projects/thetribe-store/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyCqDilj0kKMh6ILiNyaIjfSJUYyb1bblUU\",\n    authDomain: \"tribe-db.firebaseapp.com\",\n    databaseURL: \"https://tribe-db.firebaseio.com\",\n    projectId: \"tribe-db\",\n    storageBucket: \"tribe-db.appspot.com\",\n    messagingSenderId: \"228421973697\",\n    appId: \"1:228421973697:web:cc15bd6abbdc6b57808640\",\n    measurementId: \"G-049PCT3FH5\"\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  //userAuth est un tableau d'informations fournies par Google après authentification avec un compte Google\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n  //Snapshot affiche des parametres supplementaires pour savoir si l'utilisateur existe dans la BD par exemple\n  const snapShot = await userRef.get();\n  //S'il n'existe pas on va le créer, on recupère les valeurs displayName et email de userAuth\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\n//Auth pour l'authentification et Firestore pour le stockage des données\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n//Exportation des data de shop.data vers Firebase\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      //Permet de convertir le title en url classique en retirant certains caracteres indesirables\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  } , {});\n}\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}