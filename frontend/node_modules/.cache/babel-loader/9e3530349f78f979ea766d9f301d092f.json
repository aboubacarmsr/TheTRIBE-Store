{"ast":null,"code":"import UserActionTypes from './user.types';\nconst INITIAL_STATE = {\n  currentUser: null,\n  error: null\n}; //Le reducer prend un etat initial (etat precedent du state) + l'action à effectuer. Si cette action correspond\n//A une des actions qu'il peut effectuer alors il l'effectue (payload = mise à jour du state)\n//Sinon il retourne le state comme il l'a reçu\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case UserActionTypes.SIGN_IN_SUCCESS:\n    case UserActionTypes.SIGN_IN_SUCCESS:\n      return { ...state,\n        currentUser: action.payload,\n        error: null\n      };\n\n    case UserActionTypes.SIGN_IN_FAILURE:\n    case UserActionTypes.SIGN_IN_FAILURE:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["C:/Users/DELL/My Office/Projects/thetribe-store/src/redux/user/user.reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","error","userReducer","state","action","type","SIGN_IN_SUCCESS","payload","SIGN_IN_FAILURE"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,IADO;AAEpBC,EAAAA,KAAK,EAAE;AAFa,CAAtB,C,CAKA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,eAAe,CAACQ,eAArB;AACA,SAAKR,eAAe,CAACQ,eAArB;AACE,aAAO,EACL,GAAGH,KADE;AAELH,QAAAA,WAAW,EAAEI,MAAM,CAACG,OAFf;AAGLN,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAKH,eAAe,CAACU,eAArB;AACA,SAAKV,eAAe,CAACU,eAArB;AACE,aAAO,EACL,GAAGL,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAFT,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,eAAeD,WAAf","sourcesContent":["import UserActionTypes from './user.types';\n\nconst INITIAL_STATE = {\n  currentUser: null,\n  error: null\n};\n\n//Le reducer prend un etat initial (etat precedent du state) + l'action à effectuer. Si cette action correspond\n//A une des actions qu'il peut effectuer alors il l'effectue (payload = mise à jour du state)\n//Sinon il retourne le state comme il l'a reçu\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case UserActionTypes.SIGN_IN_SUCCESS:\n    case UserActionTypes.SIGN_IN_SUCCESS:\n      return {\n        ...state,\n        currentUser: action.payload,\n        error: null\n      };\n    case UserActionTypes.SIGN_IN_FAILURE:\n    case UserActionTypes.SIGN_IN_FAILURE:\n      return {\n        ...state,\n        error: action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}